コンポーネントが何かを覚えるためには、stateというものを使う

Reactコンポーネントはコンストラクタでthis.stateを設定することで、状態を保てる
this.stateはそれが定義されているコンポーネント内でプライベートと見なすべき

stateのリフトアップ
ゲームの状態を各Squareの代わりに親のBoardコンポーネントで保持することでコードを綺麗に保てる
BoardコンポーネントはそれぞれのSquareにpropsを渡すことで、何を表示するべきかを伝えられる
→ 複数の子要素からデータを集めたい、または2つの子コンポーネントに互いにやりとりさせたいと思った場合、
  代わりに親コンポーネント内で共有のstateを宣言する必要がある
  親コンポーネントはpropsを使うことで子に情報を返すことができる

  子コンポーネントが兄弟同士、あるいは親との間で常に同期されるようになる

  → stateを親コンポーネントにリフトアップすることはReactコンポーネントのリファクタリングでよくあること


イミュータビリティはなぜ重要か
データの扱いは直接書き換えるか、新しいデータのコピーで古いデータを置き換えるか
→ 直接データのミューテート(内部データの書き換え)をしないことで利点がある
1. 複雑な機能が簡単に実装できる
   → 履歴を振り返って、巻き戻しができる
2. 変更の検出
   → 参照しているイミュータブルなオブジェクトが前と別のものであれば、変更があったと判断
3. Reactの再レンダータイミングの決定
   イミュータビリティの主な利点は、Reactでpure componentを構築しやすくなる


関数コンポーネントに書き換える
Reactにおける関数コンポーネントとは、renderメソッドだけを有して自分のstateを持たないコンポーネントを、よりシンプルに書くための方法
React.Componentを継承するクラスを定義する代わりに、propsを入力として受け取り表示すべき内容を返す関数を定義する
関数コンポーネントはクラスを書くよりも楽である